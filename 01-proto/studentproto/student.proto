// Sintaxis que queremos usar
syntax = "proto3";

// Paquete en que va a vivir, paquete studen
package  student;

/*
  Una opcion nueva, esto indica el nombre que tendra el paquete
  Que se va a crear a partir de este codigo
  path -> CARPETA_PRINCIPAL/SUB_CARPETA/(estando en la raiz del go.mod)/NAME_MODULE;NAME_FILE
*/
option go_package = "go-protobuffers-grpc/01-proto/gogrpc;studentpb";

// Estructura 
message Student {
  // Atributos
  string id = 1;
  string name = 2;
  int32 age = 3;
}

// Ahora hay que compilarlo, primero necesitamos unos paquetes
// Generador de protobuffers para GO:
// $ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
// El otro paquete es para el gRPC como tal
// $ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1

// Ahora vamos a poder compilar nuestro protobor de buffer
// Paquete de protobuffer a paquete de go (Ejecutar este comando desde la raiz del go.mod)
// $ protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative studentproto/student.proto


// Windows 
// $ sudo apt install protobuf-compiler

// Mac
// $ brew install protobuf
// protoc -version
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/student.proto



// Estructura del Servicio de student
message GetStudentRequest {
  string id = 1;
}

message SetStudentResponse {
  string id = 1;
}

// Servicio de student Unario
service StudentService {  
  // Rescibimos como parametros un id de tipo string y devolvemos un Student
  rpc GetStudent(GetStudentRequest) returns (Student);
  // Recibimos un Student y respondemos con un SetStudentResponse
  rpc SetStudent(Student) returns (SetStudentResponse);  
}